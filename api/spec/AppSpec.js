!function(e){var t={};function a(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,a),s.l=!0,s.exports}a.m=e,a.c=t,a.d=function(e,t,o){a.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},a.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=8)}([function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HOME_TEAM_WINS=1,t.OUT_TEAM_WINS=2,t.MATCH_IS_DRAW=0,t.COOKIE_NAME="j_uid"},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(0);class s{constructor(e,t){this.homeTeamScore=void 0,this.outTeamScore=void 0,this.homeTeamName=e,this.outTeamName=t}getOutCome(){return this.homeTeamScore>this.outTeamScore?o.HOME_TEAM_WINS:this.outTeamScore>this.homeTeamScore?o.OUT_TEAM_WINS:o.MATCH_IS_DRAW}static deserialize(e){const t=new s(e.homeTeamName,e.outTeamName);return Object.assign(t,e),t}}t.Match=s;t.KnockoutMatch=class extends s{constructor(){super(...arguments),this.homeTeamPenaltyScore=void 0,this.outTeamPenaltyScore=void 0,this.homeTeamWins=!1,this.outTeamWins=!1}getOutCome(){return this.homeTeamWins?o.HOME_TEAM_WINS:this.outTeamWins?o.OUT_TEAM_WINS:o.MATCH_IS_DRAW}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o{constructor(e){this.points=0,this.matchesWon=0,this.matchesLost=0,this.matchesDrawed=0,this.goalsScored=0,this.goalsConcieved=0,this.subGroupIndex=0,this.name=e}reset(){this.points=0,this.matchesDrawed=0,this.matchesWon=0,this.matchesLost=0,this.goalsScored=0,this.goalsConcieved=0,this.subGroupIndex=0}getGoalsDifference(){return this.goalsScored-this.goalsConcieved}static deserialize(e){const t=e.name,a=new o(t);return a.points=Number(e.points),a.matchesWon=Number(e.matchesWon),a.matchesLost=Number(e.matchesLost),a.matchesDrawed=Number(e.matchesDrawed),a.goalsScored=Number(e.goalsScored),a.goalsConcieved=Number(e.goalsConcieved),a.subGroupIndex=Number(e.subGroupIndex),a}}t.Team=o},function(e,t,a){"use strict";function o(e){var t=e.groups[0];t.matches[0].outTeamScore=1,t.matches[0].homeTeamScore=3,t.matches[1].outTeamScore=0,t.matches[1].homeTeamScore=0,t.matches[2].outTeamScore=3,t.matches[2].homeTeamScore=3,t.matches[3].outTeamScore=3,t.matches[3].homeTeamScore=3}Object.defineProperty(t,"__esModule",{value:!0}),t.setGroupMatchScores=o,t.setGroupMatchScore2FullyEqualTeams=function(e){o(e);var t=e.groups[0];t.matches[4].outTeamScore=3,t.matches[4].homeTeamScore=3,t.matches[5].outTeamScore=3,t.matches[5].homeTeamScore=3},t.setGroupMatchScore3EqualTeams=function(e){var t=e.groups[0];t.matches[0].outTeamScore=0,t.matches[0].homeTeamScore=4,t.matches[1].outTeamScore=0,t.matches[1].homeTeamScore=1,t.matches[2].outTeamScore=1,t.matches[2].homeTeamScore=3,t.matches[3].outTeamScore=0,t.matches[3].homeTeamScore=1,t.matches[4].outTeamScore=4,t.matches[4].homeTeamScore=1,t.matches[5].outTeamScore=0,t.matches[5].homeTeamScore=2},t.setGroupMatchScore2on2EqualTeamsWithDifferenceBetween=function(e){var t=e.groups[1];t.matches[0].homeTeamScore=1,t.matches[0].outTeamScore=4,t.matches[1].homeTeamScore=3,t.matches[1].outTeamScore=0,t.matches[2].homeTeamScore=4,t.matches[2].outTeamScore=0,t.matches[3].homeTeamScore=3,t.matches[3].outTeamScore=1,t.matches[4].homeTeamScore=0,t.matches[4].outTeamScore=2,t.matches[5].homeTeamScore=2,t.matches[5].outTeamScore=0}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(1);t.KnockOutRound=class{constructor(e,t){this.name=e,this.matches=[];for(let e=0;e<t;e++)this.matches.push(new o.KnockoutMatch(void 0,void 0))}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(2),s=a(1),r=a(0);class c{constructor(e,t){this.allMatchesPlayed=!1,this.groupNeedsDraw=!1,this.groupname=e,this.teams=t,this.teams&&this.initMatches()}initMatches(){this.matches=[],this.matches.push(new s.Match(this.teams[0].name,this.teams[1].name)),this.matches.push(new s.Match(this.teams[2].name,this.teams[3].name)),this.matches.push(new s.Match(this.teams[0].name,this.teams[2].name)),this.matches.push(new s.Match(this.teams[3].name,this.teams[1].name)),this.matches.push(new s.Match(this.teams[3].name,this.teams[0].name)),this.matches.push(new s.Match(this.teams[1].name,this.teams[2].name))}processMatches(){this.allMatchesPlayed=!0,this.teams.forEach(e=>{e.reset()}),this.matches.forEach(e=>{if(void 0!=e.outTeamScore&&void 0!=e.homeTeamScore){let t=e.getOutCome(),a=this.getTeam(e.homeTeamName),o=this.getTeam(e.outTeamName);t==r.HOME_TEAM_WINS?(a.points+=3,a.matchesWon++,o.matchesLost++):t==r.OUT_TEAM_WINS?(o.points+=3,o.matchesWon++,a.matchesLost++):(a.points+=1,o.points+=1,o.matchesDrawed++,a.matchesDrawed++),o.goalsScored+=e.outTeamScore,o.goalsConcieved+=e.homeTeamScore,a.goalsScored+=e.homeTeamScore,a.goalsConcieved+=e.outTeamScore}else this.allMatchesPlayed=!1}),this.teams.forEach(e=>{e.points=3*e.matchesWon+e.matchesDrawed})}getTeam(e){for(let t of this.teams)if(t.name==e)return t}printGroupStanding(){this.teams.forEach(e=>{console.log(`${e.name}  w:${e.matchesWon}  d:${e.matchesDrawed} l:${e.matchesLost} s:${e.goalsScored} c:${e.goalsConcieved} P:${e.points}`)}),console.log("All played: "+this.allMatchesPlayed)}printGroupMatches(){this.matches.forEach(e=>{console.log(`${e.homeTeamName} - ${e.outTeamName} : ${e.homeTeamScore} - ${e.outTeamScore}`)})}getEqualTeams(){return this.equalTeams}getAllMatchesPlayed(){return this.allMatchesPlayed}addToEqualTeams(e){if(0==this.getEqualTeams().length)this.equalTeams.push(e);else{var t=!1;for(var a of this.equalTeams){var o=0;for(var s of e){if(-1!=a.lastIndexOf(s))break;o++}if(2!=o){let s=1==o?0:1;a.push(e[s]),t=!0;break}}t||this.equalTeams.push(e)}}containsTeamWithName(e){for(var t of this.teams)if(t.name==e)return!0;return!1}deserialize(e){const t=new c;Object.assign(t,e);let a=[];t.teams.forEach(e=>{a.push(o.Team.deserialize(e))}),t.teams=a;let r=[];return t.matches.forEach(e=>{r.push(s.Match.deserialize(e))}),t.matches=r,t}}t.Group=c},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Tournament=class{constructor(){this.groups=[],this.rounds=[]}}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(6),s=a(2),r=a(5),c=a(4);function n(e,t){return e.points!=t.points?t.points-e.points:e.getGoalsDifference()!=t.getGoalsDifference()?t.getGoalsDifference()-e.getGoalsDifference():e.goalsScored!=t.goalsScored?t.goalsScored-e.goalsScored:0}function m(e,t){var a=new Array;e.forEach(e=>{a.push(e.name)});var o=new Array;return t.forEach(e=>{-1!=a.indexOf(e.homeTeamName)&&-1!=a.indexOf(e.outTeamName)&&o.push(Object.create(e))}),o}function u(e,t){var a=new r.Group;for(var o of(a.teams=[],e))a.teams.push(Object.create(o));for(var o of(a.matches=m(e,t.matches),a.teams))o.reset();return a}function i(e,t){var a=0;for(var o of e.teams){if(t.containsTeamWithName(o.name))break;a++}var s=function(e,t){var a=new r.Group;for(var o of(a.teams=[],t.teams)){var s=Object.assign({},e.getTeam(o.name));a.teams.push(s)}return a}(e,t);for(var c of s.teams)e.teams.splice(a,1,c),a++}t.getTournament=function(){console.log("***** Pronostiek generation Starting ****");let e=new o.Tournament,t=["A","B","C","D","E","F","G","H"];return[["Russia","Saudi Arabia","Egypt","Uruguay"],["Portugal","Spain","Morocco","Iran"],["France","Australia","Peru","Denmark"],["Argentina","Iceland","Croatia","Nigeria"],["Brazil","Switzerland","Costa Rica","Serbia"],["Germany","Mexico","Sweden","Korea Republic"],["Belgium","Panama","Tunisia","England"],["Poland","Senegal","Colombia","Japan"]].forEach((a,o)=>{let c=[];a.forEach(e=>{c.push(new s.Team(e))});let n=new r.Group("Groep "+t[o],c);e.groups.push(n)}),[{name:"Round of 16",numberOfMatches:8},{name:"Quarter Final",numberOfMatches:4},{name:"Semi Final",numberOfMatches:2},{name:"Final",numberOfMatches:1}].forEach(t=>{let a=new c.KnockOutRound(t.name,t.numberOfMatches);e.rounds.push(a)}),e},t.compareTeams=n,t.getMatchesFromTeams=m,t.getSubGroup=u,t.orderTeams=function e(t,a){if(t.groupNeedsDraw=!1,t.equalTeams=new Array,t.teams.sort((e,a)=>{var o=n(e,a);return 0==o&&t.addToEqualTeams([e,a]),o}),t.allMatchesPlayed&&t.equalTeams.length>0)if(t.equalTeams[0].length==t.teams.length)t.groupNeedsDraw=!0;else for(var o of t.equalTeams){var s=u(o,t);s.processMatches(),t.groupNeedsDraw||e(s,!1),s.groupNeedsDraw&&(t.groupNeedsDraw=!0),i(t,s)}},t.addToNextRound=function(e){const t=e.rounds[0];e.groups.forEach((a,o)=>{if(a.allMatchesPlayed){const a=e.groups[o].teams[0],s=e.groups[o].teams[1];o%2==0?(t.matches[o].homeTeamName=a.name,t.matches[o+1].outTeamName=s.name):(t.matches[o].homeTeamName=a.name,t.matches[o-1].outTeamName=s.name)}})},t.addToNextKnockoutRound=function(e,t,a,o){if(3==t)return;let s,r=!0;0==t?(0==a||2==a?s=0:1==a||3==a?s=1:4==a||6==a?s=2:5!=a&&7!=a||(s=3),2!=a&&3!=a&&6!=a&&7!=a||(r=!1)):1==t?(s=0==a||2==a?0:1,2!=a&&3!=a||(r=!1)):(s=0,1==a&&(r=!1));let c=e.rounds[t+1].matches[s];r?c.homeTeamName=o:c.outTeamName=o},t.replaceBasedOnName=function(e,t){t[function(e,t){for(let a in t)if(t[a].groupname==e.groupname)return a}(e,t)]=e}},function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=a(7),s=a(3);describe("this will test the processing of the group matches:",function(){let e=o.getTournament();it("tournament should contain group1 A",function(){expect(e.groups[0].groupname).toEqual("Groep A")}),s.setGroupMatchScores(e),e.groups[0].processMatches();let t=e.groups[0].teams[0];it("team A has 3 points",function(){expect(t.points).toEqual(4)}),it("team C has 1 points",function(){expect(e.groups[0].teams[2].points).toEqual(2)}),it("team D has 2 points",function(){expect(e.groups[0].teams[3].points).toEqual(2)}),it("team A has scored 3 goals",function(){expect(t.goalsScored).toBe(6)}),it("team A has concieved 4 goals",function(){expect(t.goalsConcieved).toBe(4)}),it("team A has 1 drawed match",function(){expect(t.matchesDrawed).toBe(1)}),it("team A has 1 won match",function(){expect(t.matchesWon).toBe(1)})}),describe("this will test the processing of the group matches:",function(){var e=o.getTournament();s.setGroupMatchScores(e);var t=e.groups[0];t.processMatches(),o.orderTeams(t),it("Russia first",function(){expect(t.teams[0].name).toEqual("Russia")}),it("Egypt second ",function(){expect(t.teams[1].name).toEqual("Egypt")}),it("Uruguay last",function(){expect(t.teams[2].name).toEqual("Uruguay")}),it("Saudi Arabia third",function(){expect(t.teams[3].name).toEqual("Saudi Arabia")}),console.log("group A: "+t);var a=t.getEqualTeams();it("Egypt an Uruguay are concidered equal",function(){expect(a[0].length).toBe(2);let e="Egypt"==a[0][0].name||"Uruguay"==a[0][0].name,t="Egypt"==a[0][1].name||"Uruguay"==a[0][1].name;expect(e).toBeTruthy(),expect(t).toBeTruthy()})}),describe("we want to be able to select a subset of matches",function(){var e=o.getTournament().groups[0],t=o.getMatchesFromTeams([e.teams[1],e.teams[2],e.teams[3]],e.matches);it("we expect 3 matches to be selected",function(){expect(t.length).toBe(3)})}),describe("If 3 Teams are equal we need make a difference between them",function(){var e=o.getTournament();s.setGroupMatchScore3EqualTeams(e);var t=e.groups[0];t.processMatches(),o.orderTeams(t),it("we expect 3 teams to be equal",function(){expect(t.getEqualTeams().length).toBe(1),expect(t.getEqualTeams()[0].length).toBe(3)}),it("Russia should be first",function(){expect(t.teams[0].name).toBe("Russia")}),it("Saudi Arabia should be second",function(){expect(t.teams[1].name).toBe("Saudi Arabia")}),it("Uruguay should be third",function(){expect(t.teams[2].name).toBe("Uruguay")}),it("Egypt should be last",function(){expect(t.teams[3].name).toBe("Egypt")})}),describe("If 2 on 2 Teams are equal we need make a difference between them",function(){var e=o.getTournament();s.setGroupMatchScore2on2EqualTeamsWithDifferenceBetween(e);var t=e.groups[1];t.processMatches(),o.orderTeams(t,!0),it("we expect 2 teams to be equal",function(){expect(t.getEqualTeams().length).toBe(2),expect(t.getEqualTeams()[0].length).toBe(2),expect(t.getEqualTeams()[1].length).toBe(2)})}),describe("it should add teams to next knockoutround",function(){var e=o.getTournament();o.addToNextKnockoutRound(e,0,0,"winners"),it("should have added to first",function(){expect(e.rounds[1].matches[0].homeTeamName).toBe("winners")})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,